# textures_raw_data.py
# ******************************************************************************************
#
#   raylib [textures] example - Load textures from raw data
#
#   NOTE: Images are loaded in CPU memory (RAM) textures are loaded in GPU memory (VRAM)
#
#   This example has been created using raylib 1.3 (www.raylib.com)
#   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details)
#
#   Copyright (c) 2015 Ramon Santamaria (@raysan5)
#
# *******************************************************************************************/


from raylibpy.colors import *
from raylibpy.spartan import *
from raylibpy.consts import *
from ctypes import sizeof, c_void_p, cast


# include <stdlib.h>         # Required for: malloc() and free()

def main() -> int:
    # Initialization
    # --------------------------------------------------------------------------------------
    screen_width: int = 800
    screen_height: int = 450

    init_window(screen_width, screen_height, "raylib [textures] example - texture from raw data")

    # NOTE: Textures MUST be loaded after Window initialization (OpenGL context is required)

    # Load RAW image data (512x512, 32bit RGBA, no file header)
    fudesumi_raw: Image = load_image_raw("resources/fudesumi.raw", 384, 512, PIXELFORMAT_UNCOMPRESSED_R8G8B8A8, 0)
    fudesumi: Texture2D = load_texture_from_image(fudesumi_raw)  # Upload CPU (RAM) image to GPU (VRAM)
    unload_image(fudesumi_raw)  # Unload CPU (RAM) image data

    # Generate a checked texture by code
    width: int = 960
    height: int = 480

    # Dynamic memory allocation to store pixels data (Color type)
    size = width * height * sizeof(Color)
    ColorArray = Color * (width * height)
    pixels: ColorArray = ColorArray.from_buffer(bytearray(size))

    for y in range(height):
        for x in range(width):
            if ((x / 32 + y / 32) / 1) % 2 == 0:
                pixels[y * width + x] = ORANGE
            else:
                pixels[y * width + x] = GOLD

    # Load pixels data into an image structure and create texture
    checked_im: Image = Image(
        cast(pixels, c_void_p),  # We can assign pixels directly to data
        width,
        height,
        PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,
        1
    )

    checked: Texture2D = load_texture_from_image(checked_im)
    unload_image(checked_im)  # Unload CPU (RAM) image data (pixels)
    # ---------------------------------------------------------------------------------------

    # Main game loop
    while not window_should_close():  # Detect window close button or ESC key
        # Update
        # ----------------------------------------------------------------------------------
        # TODO: Update your variables here
        # ----------------------------------------------------------------------------------

        # Draw
        # ----------------------------------------------------------------------------------
        with drawing():
            clear_background(RAYWHITE)

            draw_texture(checked, screen_width / 2 - checked.width / 2, screen_height / 2 - checked.height / 2,
                         fade(WHITE, 0.5))
            draw_texture(fudesumi, 430, -30, WHITE)

            draw_text("CHECKED TEXTURE ", 84, 85, 30, BROWN)
            draw_text("GENERATED by CODE", 72, 148, 30, BROWN)
            draw_text("and RAW IMAGE LOADING", 46, 210, 30, BROWN)

            draw_text("(c) Fudesumi sprite by Eiden Marsal", 310, screen_height - 20, 10, BROWN)

        # end drawing
        # ----------------------------------------------------------------------------------

    # De-Initialization
    # --------------------------------------------------------------------------------------
    unload_texture(fudesumi)  # Texture unloading
    unload_texture(checked)  # Texture unloading

    close_window()  # Close window and OpenGL context
    # --------------------------------------------------------------------------------------

    return 0


if __name__ == '__main__':
    main()
